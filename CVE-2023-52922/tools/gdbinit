# GDBinit script provided by Allele Security Intelligence to reproduce the content from the following blog post:
#
# https://allelesecurity.com/use-after-free-vulnerability-in-can-bcm-subsystem-leading-to-information-disclosure-cve-2023-52922/
#
# Other materials related to the research can be found at https://github.com/alleleintel/research/CVE-2023-52922/.

set auto-load safe-path /
set print pretty
set disassemble-next-line yes

# Macros

macro define swab64(x) ((__u64)(                         \
         (((__u64)(x) & (__u64)0x00000000000000ffULL) << 56) |   \
         (((__u64)(x) & (__u64)0x000000000000ff00ULL) << 40) |   \
         (((__u64)(x) & (__u64)0x0000000000ff0000ULL) << 24) |   \
         (((__u64)(x) & (__u64)0x00000000ff000000ULL) <<  8) |   \
         (((__u64)(x) & (__u64)0x000000ff00000000ULL) >>  8) |   \
         (((__u64)(x) & (__u64)0x0000ff0000000000ULL) >> 24) |   \
         (((__u64)(x) & (__u64)0x00ff000000000000ULL) >> 40) |   \
         (((__u64)(x) & (__u64)0xff00000000000000ULL) >> 56)))

define printkmemcache
	
	if $argc < 1
		printf "Usage: printkmemcache ADDR\n"
	end

	if $argc == 1

	        set $object = ((struct kmem_cache *)$arg0)

                printf "Object:         "
                printf "%p\n",$object
                printf "Name:           "
                printf "%s\n",$object->name
                printf "Size:           "
                printf "%d\n",$object->size
                printf "Object size:    "
                printf "%d\n",$object->object_size
                printf "Offset:         "
                printf "%d\n",$object->offset
                printf "Refcount:       "
                printf "%d\n",$object->refcount
                printf "Ctor:           "
                printf "%p\n",$object->ctor
                printf "Inuse:          "
                printf "%d\n",$object->inuse
                printf "Align:          "
                printf "%d\n",$object->align
		printf "Random:         "
		printf "0x%lx\n",$object->random
                printf "CPU slab:       "
                printf "%p\n",$object->cpu_slab
                printf "CPU partial:    "
                printf "%d\n",$object->cpu_partial
                printf "Flags:          "
                printf "0x%x\n",$object->flags
                printf "Min partial:    "
                printf "%lu\n",$object->min_partial
                printf "Alloc flags:    "
                printf "0x%lx\n",$object->allocflags
                printf "List:           "
                printf "%p\n",&$object->list
                printf "Node:           "
                printf "%p\n",&$object->node

        end
end
document printkmemcache
	Pretty print a kmem cache object according to the ADDR passed in by the user.
end

define freelistwalk
                if $argc < 3
                        printf "Usage: freelistwalk ADDR OFFSET RANDOM\n"
                end

                if $argc == 3
                        set $object = ((void *)$arg0)
                        set $offset = $arg1
                        set $random = $arg2
                        set $count = 1

                        printf "Freelist pointer: 0x%lx\n", $object
                
                        set $next = *(unsigned long *)($object + $offset)
                        set $addr = $next ^ $random ^ swab64($object + $offset)

                        while $addr != 0
                                printf "Freelist pointer: 0x%lx\n", $addr

                                set $count = $count + 1
                                set $next = *(unsigned long *)($addr + $offset)
                                set $addr = $next ^ $random ^ swab64($addr + $offset)

                        end

                        printf "Freelist count: %d\n", $count

                end
end
document freelistwalk
        Walk into the freelist of an object according to ADDR passed in by the user. This commands needs the OFFSET and RANDOM values to be able to properly decoding the freelist.
end

define printkmemcachecpu

	if $argc < 2
		printf "Usage: printkmemcachecpu CPU PER_CPU_ADDRESS\n"
	end 

        if $argc == 2
                set $cpu = $arg0
                set $offset = $arg1

                set $object = ((struct kmem_cache_cpu *)(__per_cpu_offset[$cpu] + (unsigned long)$offset))

                printf "Object:         %p\n",$object
                printf "Freelist:       %p\n",$object->freelist
                printf "TID:            %lu\n",$object->tid
                printf "Slab:           %p\n",$object->slab
                printf "Partial:        %p\n",$object->partial
        end
end 
document printkmemcachecpu
	Pretty print a kmem cache cpu object according to the CPU number and PER_CPU address passed in by the user.
end

define slabcaches

	if $argc < 1
		printf "Usage: slabcaches \"CACHE_NAME\"\n"
	end

	if $argc == 1

		set $a = (struct kmem_cache *)0
		set $offset = &$a->list

		set $b = (struct list_head *)slab_caches->next

		set $lookup_name = 0
		set $lookup_name = $arg0

		set $cache = 0

		set $end = 0
		while (((unsigned long)$b != (unsigned long)&slab_caches) && ($end != 1))

			set $cache = ((struct kmem_cache *)((unsigned long)($b) - (unsigned long)$offset))

			if $_streq($lookup_name, $cache->name)
				printkmemcache $cache
				set $end = 1
			end

			set $b = $b->next
		end
	end
document slabcaches
        Print a slab cache according to the cache name passed in by the user.
end
